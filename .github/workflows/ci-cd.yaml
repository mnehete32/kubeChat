name: Component-based Docker Build and Push
on:
  push:
    branches:
      - master


env:
  # using minikube docker
  DOCKER_TLS_VERIFY: 1
  DOCKER_HOST: tcp://192.168.49.2:2376
  DOCKER_CERT_PATH: /home/mnehete32/.minikube/certs
  MINIKUBE_ACTIVE_DOCKERD: kube

  # added as env variable in ci/cd action runners
  # KUBEFLOW_API_URL: http://kubeflow.nehete.com/pipeline/

  # images
  DOWNLOAD_DATASET_IMAGE: kubechat-download-dataset:${{ github.sha }}
  DATA_PREP_IMAGE: kubechat-data-preparation:${{ github.sha }}
  TRAIN_TEST_SPLIT_IMAGE: kubechat-train-test-split:${{ github.sha }}
  TRAINING_IMAGE: kubechat-training:${{ github.sha }}
  TESTING_IMAGE: kubechat-testing:${{ github.sha }}


jobs:
  build_and_push_components:
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Data Preparation Component ---
      - name: Build and Push Download Dataset Docker Image
        run: |
          docker build -t $DOWNLOAD_DATASET_IMAGE .
          # docker push $DOWNLOAD_DATASET_IMAGE
        working-directory: components/download_dataset/

      # --- Data Preparation Component ---
      - name: Build and Push Data Preparation Docker Image
        run: |
          docker build -t $DATA_PREP_IMAGE .
          # docker push $DATA_PREP_IMAGE
        working-directory: components/data_prep/

      # --- Train Test Split Component ---
      - name: Build and Push Train Test Split Docker Image
        run: |
          docker build -t $TRAIN_TEST_SPLIT_IMAGE .
          # docker push $TRAIN_TEST_SPLIT_IMAGE
        working-directory: components/train_test_split/

      # --- Training Component ---
      - name: Build and Push Training Docker Image
        run: |
          docker build -t $TRAINING_IMAGE .
          # docker push $TRAINING_IMAGE
        working-directory: components/training/
      
      # --- Testing Component ---
      - name: Build and Push Testing Docker Image
        run: |
          docker build -t $TESTING_IMAGE .
          # docker push $TESTING_IMAGE
        working-directory: components/testing/


  create_kube_resources:
    needs: build_and_push_components
    runs-on: [self-hosted, linux, x64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Create resources
      run: |
        kubectl create -f kube/profile.yaml
        kubectl apply -k kube/

  run_pipeline:
    needs: create_kube_resources
    runs-on: [self-hosted, linux, x64]
    container: python:3.11.4-slim-buster
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Python dependencies
      run: |
          pip install -r 'requirements.txt'
    - name: Run Pipeline     
      env:
        PIPELINE_NAME: ${{ env.PIPELINE_NAME }}
        NAMESPACE: ${{ env.NAMESPACE }}
        EXPERIMENT_NAME: ${{ env.EXPERIMENT_NAME }}
        USER_NAME: ${{ secrets.USER_NAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
        KUBEFLOW_API_URL: ${{ env.KUBEFLOW_API_URL }}
      run: |
          python pipeline.py --commit_sha_tag ${{ github.sha }}
      